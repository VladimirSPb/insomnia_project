# üìÅ –§–∞–π–ª: fastapi_opus_server.py
# FastAPI —Å–µ—Ä–≤–µ—Ä, –æ–±—Å–ª—É–∂–∏–≤–∞—é—â–∏–π –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å OPUS-MT –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM
import torch

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(title="Local OPUS-MT Translator API")

# ‚úÖ –ú–æ–¥–µ–ª—å –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ)
model_name = "Helsinki-NLP/opus-mt-mul-en"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForSeq2SeqLM.from_pretrained(model_name)


# ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ JSON-–∑–∞–ø—Ä–æ—Å–∞
class TranslationRequest(BaseModel):
    text: str
    src_lang: str = "mul"        # –Ø–∑—ã–∫-–∏—Å—Ç–æ—á–Ω–∏–∫ (–º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π)
    tgt_lang: str = "en"         # –Ø–∑—ã–∫-–ø–µ—Ä–µ–≤–æ–¥–∞ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)


# ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ä—É—á–∫–∞ API: POST /translate
@app.post("/translate")
def translate(request: TranslationRequest):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON:
    {
        "text": "Bonjour le monde",
        "src_lang": "fr",
        "tgt_lang": "en"
    }

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON:
    {
        "translated_text": "Hello world"
    }
    """
    try:
        # üîΩ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        input_text = request.text

        # üîΩ –¢–æ–∫–µ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç (–æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Ç–µ–Ω–∑–æ—Ä—ã –¥–ª—è –ø–æ–¥–∞—á–∏ –≤ –º–æ–¥–µ–ª—å)
        inputs = tokenizer(input_text, return_tensors="pt", padding=True, truncation=True)
        inputs = {key: value.to(model.device) for key, value in inputs.items()}

        # üîΩ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –º–æ–¥–µ–ª—å—é
        outputs = model.generate(**inputs)

        # üîΩ –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
        translated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)

        # üîº –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
        return {"translated_text": translated_text}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")


# ‚úÖ –ë–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ Docker (–∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ python —Å–∫—Ä–∏–ø—Ç)
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("fastapi_opus_server:app", host="0.0.0.0", port=8000, reload=True)
